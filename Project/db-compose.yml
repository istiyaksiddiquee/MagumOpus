version: '3.8'

services:
  postgres_db:
    hostname: postgres
    container_name: magnum_pgdb
    image: postgres:13
    ports: 
      - 5432:5432
    volumes:
      - pg-datastore:/var/lib/postgresql
      - ./dev-PostgresDB/init.sql:/docker-entrypoint-initdb.d/init.sql
    # secrets:
    #   - source: db_password
    #     target: DB_PASSWORD
    environment: 
      - POSTGRES_PASSWORD=password
    networks:
      - backend
  # pgadmin:
  #  hostname: pgadmin
  #  container_name: magnum_pgadmin
  #  image: dpage/pgadmin4:latest
  #  ports: 
  #    - 5050:80 
  #  environment:
  #    - PGADMIN_DEFAULT_EMAIL=istiyak@google.com
  #    - PGADMIN_DEFAULT_PASSWORD=123456
  #  depends_on: 
  #    - postgres_db
  #  networks:
  #    - backend
  mysqldb:
    hostname: mysql
    container_name: magnum_mysqldb
    image: mysql:8
    ports: 
      - 3306:3306
    volumes:
      - mysql-datastore:/var/lib/mysql
      - ./dev-mysqlDB:/docker-entrypoint-initdb.d
    # secrets:
    #   - source: db_password
    #     target: DB_PASSWORD
    environment: 
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_USER=magnumopus
      - MYSQL_PASSWORD=123456
    networks:
      - backend 
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
  # gosvc:
  #   hostname: gosvc 
  #   container_name: go_trial
  #   image: go-test:0.2.0 
  #   ports: 
  #     - 3000:3000
  #   environment:
  #     - PG_HOST=magnum_mysqldb
  #     - PG_PORT=3306
  #     - PG_USER=magnumopus
  #     - PG_PASSWORD=123456
  #     - PG_DB=exam
  #   networks:
  #     - backend
  #   depends_on:
  #     mysqldb: 
  #       condition: service_healthy
  
  # user_mgmt:
  #   container_name: user_management
  #   build:
  #     context: ./Project1
  #     dockerfile: Dockerfile
  #   ports: 
  #     - 8080:8080
  #   networks:
  #     - backend
  #   depends_on:
  #     - postgres_db


volumes:
  pg-datastore:
  mysql-datastore: 

# secrets:
#   db_password:
#     file: "./PostgresDB/db_password"  

networks:
  backend:
    driver: bridge    